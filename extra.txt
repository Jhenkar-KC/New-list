    void *File_Write(node *head)
    {
        FILE *file;
        file = fopen("data.txt", "a");
        if (file == NULL)
        {
            printf("error");
        }
        else
        {
            while (head != NULL)
            {
                fprintf(file, "%s\n", head->name);
                fprintf(file, "%s\n", head->email);
                fprintf(file, "%s\n", head->city);
                fprintf(file, "%s\n", head->mobile);
                head = head->next;
            }
        }
        fclose(file);
        return head;
    }

    /* To read the contents from the file */
    single_linked_list_node *File_Read(single_linked_list_node *node_n)
    {
        FILE *file = fopen("data.txt", "r");
        if (file == NULL)
        {
            printf("There is Error in Opening of a file\n");
        }
        while (!feof(file))
        {
            single_linked_list_node *newnode = (single_linked_list_node *)malloc(sizeof(single_linked_list_node));
            fscanf(file, "%s\n", newnode->name);
            fscanf(file, "%s\n", newnode->email);
            fscanf(file, "%s\n", newnode->city);
            fscanf(file, "%s\n", newnode->mobile);
            newnode->next = NULL;
            head = insert(head, newnode);
        }
        fclose(file);
        return head;
    }

    
    binary_tree_node *delete_tree_node(person *getName(), binary_tree_node *node_data)
    {
        binary_tree_node *temp;
        if (node_data == NULL)
        {
            printf("No Elements Found \n");
        }
        else if (node_data->getName() < node_data->data->getName())
        {
            node_data->left = delete_tree_node(node_data->left, node_data);
        }
        else if (data->getName() > node_data->data->getName())
        {
            node_data->right = delete_tree_node(node_data->right, node_data);
        }
        else
        {
            if (node_data->right && node_data->left)
            {
                temp = Min_node(node_data->right);
                node_data->data->getName() = temp->data->getName();
                node_data->left = delete_tree_node(node_data->right, temp->data->getName());
            }
            else
            {
                temp = node_data;
                if (node_data->left == NULL)
                {
                    node_data = node_data->right;
                }
                else if (node_data->right == NULL)
                {
                    node_data = node_data->left;
                }
                free(temp);
            }
        }
        return node_data;
    }
};


    void insertNode(binary_tree_node *root, binary_tree_node *node)
    {
        if (this->tree == NULL)
        {
            this->tree = node;
            return;
        }

        if (root->data->getName() < node->data->getName())
        {
            if (root->left == NULL)
            {
                root->left = node;
                return;
            }
            insertNode(root->left, node);
            return;
        }

        if (root->data->getName() > data->data->getName())
        {
            if (root->right == NULL)
            {
                root->right = node;
                return;
            }
            insertNode(root->right, node);
        }
    }





    
    void insertNode(binary_tree_node *root, binary_tree_node *node)
    {
        if (this->tree == NULL)
        {
            this->tree = node;
            return;
        }

        if (root->data->getName() < node->data->getName())
        {
            if (root->left == NULL)
            {
                root->left = node;
                return;
            }
            insertNode(root->left, node);
            return;
        }

        if (root->data->getName() > node->data->getName())
        {
            if (root->right == NULL)
            {
                root->right = node;
                return;
            }
            insertNode(root->right, node);
        }
    }